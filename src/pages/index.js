import Head from "next/head";
import RepoCard from "../components/RepoCard";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import {
  getReposByOrgService,
  getReposByUserNameService,
} from "../services/index";
import styles from "./styles.module.css";
import SearchBar from "@/components/SearchBar";
import SortInput from "@/components/SortInput";

export default function Home() {
  const router = useRouter();
  const stringSearch = router.query?.search || "";
  const sort = router.query?.sort || "";
  const listKeyword = stringSearch.split(" ");
  const [data, setData] = useState([]);
  const [isFetching, setIsFetching] = useState(false);
  const [page, setPage] = useState(1);
  const [finish, setFinish] = useState(false);
  const loadData = async () => {
    if (stringSearch) {
      // search new keyword
      const reposByOrg = await Promise.all(
        listKeyword.map((item) => getReposByOrgService(item.toString(), page))
      );
      const reposByUsername = await Promise.all(
        listKeyword.map((item) =>
          getReposByUserNameService(item.toString(), page)
        )
      );
      if (reposByOrg?.length === 0 && reposByUsername?.length === 0) {
        setFinish(true);
        return;
      }
      let listRepo = [];
      listRepo = listRepo.concat.apply(listRepo, reposByOrg);
      listRepo = listRepo.concat.apply(listRepo, reposByUsername);
      // if (sort === "star") {
      //   listRepo.sort((a, b) => a?.stargazers_count > b?.stargazers_count);
      // }
      const newList = data.concat(listRepo);
      setData(newList);
      // setIsFetching(false);
    } else {
      setData([]);
    }
  };

  useEffect(() => {
    loadData();
  }, [stringSearch, page]);

  const handleOnScroll = () => {
    if (
      window.innerHeight +
        Math.max(
          window.pageYOffset,
          document.documentElement.scrollTop,
          document.body.scrollTop
        ) >
      document.documentElement.offsetHeight - 1000
    ) {
      setPage(page + 1);
      // setIsFetching(true);
    }
  };
  useEffect(() => {
    window.addEventListener("scroll", handleOnScroll, { passive: true });
    return () => {
      window.removeEventListener("scroll", handleOnScroll);
    };
  }, [page]);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <div className={styles.container} onScroll={handleOnScroll}>
          <SearchBar setData={setData} />
          <SortInput />
          {data.length > 0 ? (
            data?.map((item) => {
              const {
                stargazers_count = 0,
                watchers_count = "",
                full_name = "",
                description = null,
                html_url = "",
                owner = {},
                language = "",
                updated_at = "",
                id = "",
              } = item || {};
              const { avatar_url = "", type = "" } = owner || {};
              const info = {
                stargazers_count,
                watchers_count,
                full_name,
                description,
                avatar_url,
                type,
                html_url,
                language,
                updated_at,
              };
              return <RepoCard info={info} key={id} />;
            })
          ) : (
            <div>No resuls</div>
          )}
          {finish && <div>All results are loaded</div>}
        </div>
      </div>
    </>
  );
}
